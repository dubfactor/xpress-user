{"version":3,"sources":["Components/Forms/AddEditForm.js","Components/Modals/Modal.js","Components/Tables/DataTable.js","App.js","serviceWorker.js","index.js"],"names":["AddEditForm","state","user_id","first_name","last_name","email","city","zipcode","address","registration_date","phone","added","onChange","e","_this","setState","Object","defineProperty","target","name","value","submitFormAdd","preventDefault","fetch","method","headers","Content-Type","body","JSON","stringify","then","response","json","item","Array","isArray","props","addItemToState","toggle","console","log","catch","err","submitFormEdit","updateState","this","_this$props$item","react_default","a","createElement","Form","onSubmit","FormGroup","Label","for","Input","type","id","Button","React","Component","ModalForm","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","prevState","modal","closeBtn","className","onClick","label","buttonLabel","button","title","color","style","float","marginRight","Modal","isOpen","ModalHeader","close","ModalBody","Forms_AddEditForm","DataTable","deleteItem","window","confirm","deleteItemFromState","_this2","items","map","key","scope","width","Modals_Modal","Table","responsive","hover","App","concat","toConsumableArray","itemIndex","findIndex","data","newArray","slice","updatedItems","filter","getItems","Container","Row","Col","margin","Tables_DataTable","react_csv","filename","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.953ba907.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nclass AddEditForm extends React.Component {\n  state = {\n    user_id: 0,\n    first_name: '',\n    last_name: '',\n    email: '',\n    city: '',\n    zipcode: '',\n    address: '',\n    registration_date: '',\n    phone: '',\n    added: '',\n  }\n\n  onChange = e => {\n    this.setState({[e.target.name]: e.target.value})\n  }\n\n  submitFormAdd = e => {\n    e.preventDefault()\n    fetch('http://localhost:3000/crud', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user_id: this.state.user_id,\n        first_name: this.state.first_name,\n        last_name: this.state.last_name,\n        email: this.state.email,\n        city: this.state.city,\n        zipcode: this.state.zipcode,\n        address: this.state.address,\n        registration_date: this.state.registration_date,\n        phone: this.state.phone,\n        added: this.state.added\n      })\n    })\n      .then(response => response.json())\n      .then(item => {\n        if(Array.isArray(item)) {\n          this.props.addItemToState(item[0])\n          this.props.toggle()\n        } else {\n          console.log('failure on submitFormAdd()')\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  submitFormEdit = e => {\n    e.preventDefault()\n    fetch('http://localhost:3000/crud', {\n      method: 'put',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user_id: this.state.user_id,\n        first_name: this.state.first_name,\n        last_name: this.state.last_name,\n        email: this.state.email,\n        city: this.state.city,\n        zipcode: this.state.zipcode,\n        address: this.state.address,\n        registration_date: this.state.registration_date,\n        phone: this.state.phone,\n        added: this.state.added\n      })\n    })\n      .then(response => response.json())\n      .then(item => {\n        if(Array.isArray(item)) {\n          // console.log(item[0])\n          this.props.updateState(item[0])\n          this.props.toggle()\n        } else {\n          console.log('failure on submitFormEdit()')\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  componentDidMount(){\n    // if item exists, populate the state with proper data\n    if(this.props.item){\n      const { user_id, first_name, last_name, email, city, zipcode, address, registration_date, phone } = this.props.item\n      this.setState({ user_id, first_name, last_name, email, city, zipcode, address, registration_date, phone })\n    }\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.props.item ? this.submitFormEdit : this.submitFormAdd}>\n        <FormGroup>\n          <Label for=\"user_id\">user_id</Label>\n          <Input type=\"text\" name=\"user_id\" id=\"user_id\" onChange={this.onChange} value={this.state.user_id === null ? '' : this.state.user_id} />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"first_name\">First Name</Label>\n          <Input type=\"text\" name=\"first_name\" id=\"first_name\" onChange={this.onChange} value={this.state.first_name === null ? '' : this.state.first_name} />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"last_name\">Last Name</Label>\n          <Input type=\"text\" name=\"last_name\" id=\"last_name\" onChange={this.onChange} value={this.state.last_name === null ? '' : this.state.last_name}  />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"email\">Email</Label>\n          <Input type=\"email\" name=\"email\" id=\"email\" onChange={this.onChange} value={this.state.email === null ? '' : this.state.email}  />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"city\">Phone</Label>\n          <Input type=\"text\" name=\"city\" id=\"city\" onChange={this.onChange} value={this.state.city === null ? '' : this.state.city}   />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"zipcode\">Zipcode</Label>\n          <Input type=\"text\" name=\"zipcode\" id=\"zipcode\" onChange={this.onChange} value={this.state.zipcode === null ? '' : this.state.zipcode}  /*placeholder=\"City, State\"*/ />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"address\">Address</Label>\n          <Input type=\"text\" name=\"address\" id=\"address\" onChange={this.onChange} value={this.state.address === null ? '' : this.state.address}  />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"registration_date\">Registration_Date</Label>\n          <Input type=\"text\" name=\"registration_date\" id=\"registration_date\" onChange={this.onChange} value={this.state.registration_date === null ? '' : this.state.registration_date}  />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"phone\">Phone</Label>\n          <Input type=\"text\" name=\"phone\" id=\"phone\" onChange={this.onChange} value={this.state.phone === null ? '' : this.state.phone} />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"added\">Added</Label>\n          <Input type=\"text\" name=\"added\" id=\"added\" onChange={this.onChange} value={this.state.added === null ? '' : this.state.added}  />\n        </FormGroup>\n\n        <Button>Submit</Button>\n      </Form>\n    );\n  }\n}\n\nexport default AddEditForm","\nimport React, { Component } from 'react'\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap'\nimport AddEditForm from '../Forms/AddEditForm'\n\nclass ModalForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      modal: false\n    }\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }))\n  }\n\n  render() {\n      const closeBtn = <button className=\"close\" onClick={this.toggle}>&times;</button>\n\n      const label = this.props.buttonLabel\n\n      let button = ''\n      let title = ''\n\n      if(label === 'Edit'){\n        button = <Button\n                  color=\"warning\"\n                  onClick={this.toggle}\n                  style={{float: \"left\", marginRight:\"10px\"}}>{label}\n                </Button>\n        title = 'Edit Item'\n      } else {\n        button = <Button\n                  color=\"success\"\n                  onClick={this.toggle}\n                  style={{float: \"left\", marginRight:\"10px\"}}>{label}\n                </Button>\n        title = 'Add New Item'\n      }\n\n\n      return (\n      <div>\n        {button}\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n          <ModalHeader toggle={this.toggle} close={closeBtn}>{title}</ModalHeader>\n          <ModalBody>\n            <AddEditForm\n              addItemToState={this.props.addItemToState}\n              updateState={this.props.updateState}\n              toggle={this.toggle}\n              item={this.props.item} />\n          </ModalBody>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default ModalForm;","\nimport React, { Component } from 'react'\nimport { Table, Button } from 'reactstrap';\nimport ModalForm from '../Modals/Modal'\n\nclass DataTable extends Component {\n\n  deleteItem = id => {\n    let confirmDelete = window.confirm('Delete item forever?')\n    if(confirmDelete){\n      fetch('http://localhost:3000/crud', {\n      method: 'delete',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id\n      })\n    })\n      .then(response => response.json())\n      .then(item => {\n        this.props.deleteItemFromState(id)\n      })\n      .catch(err => console.log(err))\n    }\n\n  }\n\n  render() {\n\n    const items = this.props.items.map(item => {\n      return (\n        <tr key={item.id}>\n          <th scope=\"row\">{item.id}</th>\n          <td>{item.first_name}</td>\n          <td>{item.last_name}</td>\n          <td>{item.email}</td>\n          <td>{item.city}</td>\n          <td>{item.zipcode}</td>\n          <td>{item.address}</td>\n          <td>{item.registration_date}</td>\n          <td>{item.phone}</td>\n          <td>\n\n            {/* /* this is really creating the button in the Modal Component */ }\n            <div style={{width:\"110px\"}}>\n              <ModalForm buttonLabel=\"Edit\" item={item} updateState={this.props.updateState}/>\n              {' '}\n              <Button color=\"danger\" onClick={() => this.deleteItem(item.id)}>Del</Button>\n            </div>\n\n          </td>\n        </tr>\n        )\n      })\n\n    return (\n      <Table responsive hover>\n        <thead>\n          <tr>\n          <th>ID</th>\n            <th>First</th>\n            <th>Last</th>\n            <th>Email</th>\n            <th>City</th>\n            <th>Zip</th>\n            <th>Address</th>\n            <th>Sticker_Date</th>\n          </tr>\n        </thead>\n        <tbody>\n          {items}\n        </tbody>\n      </Table>\n    )\n  }\n}\n\nexport default DataTable","import React, { Component } from 'react'\n//reactstrap components\nimport { Container, Row, Col } from 'reactstrap'\nimport ModalForm from './Components/Modals/Modal'\nimport DataTable from './Components/Tables/DataTable'\nimport { CSVLink } from \"react-csv\"\n\n\nclass App extends Component {\n  state = {\n    items: []\n  }\n/*As this app is only one page the state will be contained in this file. We create a function to fetch all data from our api and add it to the state.\n*/\n\n/* Because fetch is an asynchronous function that returns a promise, \nwe call the getItems() function from componentDidMount() -further down- \nin order to not block the initial rendering of the page.\n*/\n  getItems(){\n    fetch('http://localhost:3000/crud')\n      .then(response => response.json())\n      .then(items => this.setState({items}))\n      .catch(err => console.log(err))\n  }\n\n  addItemToState = (item) => {\n    this.setState(prevState => ({\n      items: [...prevState.items, item]\n    }))\n  }\n\n  updateState = (item) => {\n    const itemIndex = this.state.items.findIndex(data => data.id === item.id)\n    const newArray = [\n    // destructure all items from beginning to the indexed item\n      ...this.state.items.slice(0, itemIndex),\n    // add the updated item to the array\n      item,\n    // add the rest of the items to the array from the index after the replaced item\n      ...this.state.items.slice(itemIndex + 1)\n    ]\n    this.setState({ items: newArray })\n  }\n\n  deleteItemFromState = (id) => {\n    const updatedItems = this.state.items.filter(item => item.id !== id)\n    this.setState({ items: updatedItems })\n  }\n\n  componentDidMount(){\n    this.getItems()\n  }\n\n  render() {\n    return (\n      <Container className=\"App\">\n        <Row>\n          <Col>\n            <h1 style={{margin: \"20px 0\"}}>CRUD Database</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <DataTable items={this.state.items} updateState={this.updateState} deleteItemFromState={this.deleteItemFromState} />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <CSVLink\n              filename={\"db.csv\"}\n              color=\"primary\"\n              style={{float: \"left\", marginRight: \"10px\"}}\n              className=\"btn btn-primary\"\n              data={this.state.items}>\n              Download CSV\n            </CSVLink>\n            <ModalForm buttonLabel=\"Add Item\" addItemToState={this.addItemToState}/>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default App\n\n// import React from 'react';\n// // import logo from './logo.svg';\n// // import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}